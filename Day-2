Questions 1
List and its default functions.
ANSWER: 
                Adding and Appending

append(): Used for appending and adding elements to List.It is used to add elements to the last position of List.
Syntax:   list.append (element) 

Example:  
          # Adds List Element as value of List. 
        List = ['Mathematics', 'chemistry', 1997, 2000] 
         List.append(20544) 
         print(List)
Output: ['Mathematics', 'chemistry', 1997, 2000, 20544]


insert(): Inserts an elements at specified position.
Syntax: list.insert(<position, element)

Example:  
          List = ['Mathematics', 'chemistry', 1997, 2000] 
          # Insert at index 2 value 10087 
          List.insert(2,10087)      
          print(List) 
Output: ['Mathematics', 'chemistry', 10087, 1997, 2000, 20544]

extend(): Adds contents to List2 to the end of List1.
Syntax:  List1.extend(List2)

Example:  
          List1 = [1, 2, 3] 
          List2 = [2, 3, 4, 5] 
  
                                  # Add List2 to List1 
          List1.extend(List2)         
          print(List1) 
  
                                 # Add List1 to List2 now 
          List2.extend(List1)  
          print(List2) 
Output:

        [1, 2, 3, 2, 3, 4, 5]
        [2, 3, 4, 5, 1, 2, 3, 2, 3, 4, 5]
        
        
sum(), count(), index(), min() and max() functions of List
-------------------------------------------------------------------------------

sum() : Calculates sum of all the elements of List.
Syntax:
               sum(List)
               
Example:               
             List = [1, 2, 3, 4, 5] 
             print(sum(List)) 
Output: 
          15
          
          
count():Calculates total occurrence of given element of List.
Syntax:
           List.count(element)
Example:
          List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1] 
          print(List.count(1)) 
Output: 
        4
       
length:Calculates total length of List.
Syntax:
            len(list_name)
Example:
             List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1] 
              print(len(List)) 
Output:
        10
        
index(): Returns the index of first occurrence. Start and End index are not necessary parameters.
Syntax:
          List.index(element[,start[,end]])
Example:
          List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1] 
          print(List.index(2)) 
Output:
            1
        
min() : Calculates minimum of all the elements of List.
Syntax:
         min(List)
Example:
              List = [2.3, 4.445, 3, 5.33, 1.054, 2.5] 
              print(min(List)) 
Output:
              1.054
max(): Calculates maximum of all the elements of List.
Syntax:
          max(List)
Example:
             List = [2.3, 4.445, 3, 5.33, 1.054, 2.5] 
              print(max(List)) 
Output:
          5.33
sort() and reverse() functions:

reverse(): Sort the given data structure (both tuple and list) in ascending order. Key and reverse_flag are not necessary parameter and reverse_flag is set to False, if nothing is passed through sorted().
Syntax:
            sorted([list[,key[,Reverse_Flag]]])
            list.sort([key,[Reverse_flag]])
Example:
              List = [2.3, 4.445, 3, 5.33, 1.054, 2.5] 
  
                                #Reverse flag is set True 
              List.sort(reverse=True)  
  
                                  #List.sort().reverse(), reverses the sorted list   
              print(List)         
Output:
          [5.33, 4.445, 3, 2.5, 2.3, 1.054]

Example:
          List = [2.3, 4.445, 3, 5.33, 1.054, 2.5] 
          sorted(List) 
          print(List) 
Output:
          [1.054, 2.3, 2.5, 3, 4.445, 5.33]

Questions 2
Dictionary and its default functions.
  
Answer: A dictionary is a collection of key/value pairs. Python has various methods to work in dictionaries

Function	Description
all()	--------------Return True if all keys of the dictionary are True (or if the dictionary is empty).
any()	--------------Return True if any key of the dictionary is true. If the dictionary is empty, return False .
len()---------------Return the length (the number of items) in the dictionary.
cmp()--------------	Compares items of two dictionaries. (Not available in Python 3)
sorted()-----------	Return a new sorted list of keys in the dictionary.


Questions 3
Sets and its default functions
Answer:
Function	Description
all()-----------	Returns True if all elements of the set are true (or if the set is empty).
any()-----------	Returns True if any element of the set is true. If the set is empty, returns False.
enumerate()------------	Returns an enumerate object. It contains the index and value for all the items of the set as a pair.
len()-----------------Returns the length (the number of items) in the set.
max()--------------	Returns the largest item in the set.
min()--------------	Returns the smallest item in the set.
sorted()-----------	Returns a new sorted list from elements in the set(does not sort the set itself).
sum()------------Returns the sum of all elements in the set.


Questions 4
Tuple and explore default methods.
Answer:-
Tuple Methods
Methods that add items or remove items are not available with tuple. Only the following two methods are available.

Some examples of Python tuple methods:

my_tuple = ('a', 'p', 'p', 'l', 'e',)

print(my_tuple.count('p'))  # Output: 2
print(my_tuple.index('l'))  # Output: 3
Output

2
3


Questions 5
Strings and explore default methods.

Answer: 
The format() Method for Formatting Strings:  

      The format() method that is available with the string object is very versatile and powerful in formatting strings. Format strings contain curly braces {} as placeholders or replacement fields which get replaced.

We can use positional arguments or keyword arguments to specify the order.

# Python string format() method

# default(implicit) order
default_order = "{}, {} and {}".format('John','Bill','Sean')
print('\n--- Default Order ---')
print(default_order)

# order using positional argument
positional_order = "{1}, {0} and {2}".format('John','Bill','Sean')
print('\n--- Positional Order ---')
print(positional_order)

# order using keyword argument
keyword_order = "{s}, {b} and {j}".format(j='John',b='Bill',s='Sean')
print('\n--- Keyword Order ---')
print(keyword_order)
When we run the above program, we get the following output:

--- Default Order ---
John, Bill and Sean

--- Positional Order ---
Bill, John and Sean

--- Keyword Order ---
Sean, Bill and John
The format() method can have optional format specifications. They are separated from the field name using colon. For example, we can left-justify <, right-justify > or center ^ a string in the given space.

We can also format integers as binary, hexadecimal, etc. and floats can be rounded or displayed in the exponent format. There are tons of formatting you can use. Visit here for all the string formatting available with the format() method.

>>> # formatting integers
>>> "Binary representation of {0} is {0:b}".format(12)
'Binary representation of 12 is 1100'

>>> # formatting floats
>>> "Exponent representation: {0:e}".format(1566.345)
'Exponent representation: 1.566345e+03'

>>> # round off
>>> "One third is: {0:.3f}".format(1/3)
'One third is: 0.333'

>>> # string alignment
>>> "|{:<10}|{:^10}|{:>10}|".format('butter','bread','ham')
'|butter    |  bread   |       ham|'
Old style formatting:-
---------------------------------
We can even format strings like the old sprintf() style used in C programming language. We use the % operator to accomplish this.

>>> x = 12.3456789
>>> print('The value of x is %3.2f' %x)
The value of x is 12.35
>>> print('The value of x is %3.4f' %x)
The value of x is 12.3457
Common Python String Methods:-
------------------------------------
There are numerous methods available with the string object. The format() method that we mentioned above is one of them. Some of the commonly used methods are lower(), upper(), join(), split(), find(), replace() etc. Here is a complete list of all the built-in methods to work with strings in Python.

>>> "PrOgRaMiZ".lower()
'programiz'
>>> "PrOgRaMiZ".upper()
'PROGRAMIZ'
>>> "This will split all words into a list".split()
['This', 'will', 'split', 'all', 'words', 'into', 'a', 'list']
>>> ' '.join(['This', 'will', 'join', 'all', 'words', 'into', 'a', 'string'])
'This will join all words into a string'
>>> 'Happy New Year'.find('ew')
7
>>> 'Happy New Year'.replace('Happy','Brilliant')
'Brilliant New Year'







